{
  "address": "0x8fF40FA64713945acdC05d0bbeA584b85aE4d1b5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executorFeeNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ExecutorFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FeeToSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OrderPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_pathToTokenOut",
          "type": "address[]"
        }
      ],
      "name": "canExecuteOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_pathToTokenOut",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pathToMate",
          "type": "address[]"
        }
      ],
      "name": "canExecuteOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_pathToTokenOut",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pathToMate",
          "type": "address[]"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_pathToTokenOut",
          "type": "address[]"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executorFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "getAmountOutMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenOrders",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum OrderBook.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        }
      ],
      "name": "isExpiredOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openOrders",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "enum OrderBook.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "placeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_executorFeeNumerator",
          "type": "uint256"
        }
      ],
      "name": "setExecutorFeeNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeNumerator",
          "type": "uint256"
        }
      ],
      "name": "setFeeNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x957ac7abc91c26abab0af83ce1e39a8e4b9980e379e26183bbd71dd0879b922a",
  "receipt": {
    "to": null,
    "from": "0x32285CDCF39bA5c9b32F8b2AEae41eD95F6b6C1e",
    "contractAddress": "0x8fF40FA64713945acdC05d0bbeA584b85aE4d1b5",
    "transactionIndex": 5,
    "gasUsed": "2558541",
    "logsBloom": "0x
    "blockHash": "0xb02b1b805e4fb60523296a1ef5d46cf72b6f3f4fd2b081e5f77fa3c910a3c182",
    "transactionHash": "0x957ac7abc91c26abab0af83ce1e39a8e4b9980e379e26183bbd71dd0879b922a",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 12241148,
        "transactionHash": "0x957ac7abc91c26abab0af83ce1e39a8e4b9980e379e26183bbd71dd0879b922a",
        "address": "0x8fF40FA64713945acdC05d0bbeA584b85aE4d1b5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000032285cdcf39ba5c9b32f8b2aeae41ed95f6b6c1e"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xb02b1b805e4fb60523296a1ef5d46cf72b6f3f4fd2b081e5f77fa3c910a3c182"
      }
    ],
    "blockNumber": 12241148,
    "cumulativeGasUsed": "2861244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
    "0x854DBfF095F0dF750ee97Dd724f474856647FA85",
    "0x8C2CD3357Ba752CefB408a7C2577d78a285A56F9"
  ],
  "solcInputHash": "1baa06074231494aaf8b35b79328fb63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorFeeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExecutorFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeToSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_pathToTokenOut\",\"type\":\"address[]\"}],\"name\":\"canExecuteOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_pathToTokenOut\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pathToMate\",\"type\":\"address[]\"}],\"name\":\"canExecuteOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_pathToTokenOut\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pathToMate\",\"type\":\"address[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_pathToTokenOut\",\"type\":\"address[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenOrders\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum OrderBook.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"isExpiredOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openOrders\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"placeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executorFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"setExecutorFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountOutMin(uint256,address[])\":{\"details\":\"Function to get the minumum amount from a swap\",\"params\":{\"_amountIn\":\"Amount of input token\",\"_path\":\"An array of addresses from tokenIn to tokenOut\"},\"returns\":{\"_0\":\"Minumim amount out\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MateCore.sol\":\"MateCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/core/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FeeManager is Ownable {\\n    uint256 public constant DENOMINATOR = 10000;\\n\\n    uint256 public executorFeeNumerator = 15;\\n    uint256 public feeNumerator = 5;\\n\\n    address public feeTo;\\n\\n    event FeeSet(uint256 feeNumerator, uint256 timestamp);\\n    event ExecutorFeeSet(uint256 executorFeeNumerator, uint256 timestamp);\\n    event FeeToSet(address feeTo, uint256 timestamp);\\n\\n    function calculateFees(uint256 _amount)\\n        public\\n        view\\n        returns (uint256 fee, uint256 executorFee)\\n    {\\n        fee = (_amount * feeNumerator) / DENOMINATOR;\\n        executorFee = (_amount * executorFeeNumerator) / DENOMINATOR;\\n    }\\n\\n    function setFeeNumerator(uint256 _feeNumerator) external onlyOwner {\\n        feeNumerator = _feeNumerator;\\n        emit FeeSet(_feeNumerator, block.timestamp);\\n    }\\n\\n    function setExecutorFeeNumerator(uint256 _executorFeeNumerator)\\n        external\\n        onlyOwner\\n    {\\n        executorFeeNumerator = _executorFeeNumerator;\\n        emit ExecutorFeeSet(_executorFeeNumerator, block.timestamp);\\n    }\\n\\n    function setFeeTo(address _feeTo) external onlyOwner {\\n        require(_feeTo != address(0), \\\"Invalid fee to address\\\");\\n        feeTo = _feeTo;\\n        emit FeeToSet(feeTo, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x17b2d8cef5c079ebdd0855792f83cc583e1992f304d2c56524b29c5c6e77ebb4\",\"license\":\"MIT\"},\"contracts/core/MateCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./OrderBook.sol\\\";\\nimport \\\"./FeeManager.sol\\\";\\n\\ncontract MateCore is OrderBook, FeeManager, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable mate;\\n\\n    constructor(\\n        address _router,\\n        address _mate,\\n        address _feeTo\\n    ) {\\n        router = IUniswapV2Router02(_router);\\n        factory = IUniswapV2Factory(router.factory());\\n        mate = _mate;\\n        feeTo = _feeTo;\\n    }\\n\\n    event OrderExecuted(\\n        bytes32 indexed orderId,\\n        address indexed executor,\\n        uint256 timestamp\\n    );\\n\\n    function canExecuteOrder(bytes32 _orderId, address[] memory _pathToTokenOut)\\n        external\\n        view\\n        returns (bool success, string memory reason)\\n    {\\n        return _canExecuteOrder(_orderId, _pathToTokenOut, new address[](0));\\n    }\\n\\n    function canExecuteOrder(\\n        bytes32 _orderId,\\n        address[] memory _pathToTokenOut,\\n        address[] memory _pathToMate\\n    ) external view returns (bool success, string memory reason) {\\n        return _canExecuteOrder(_orderId, _pathToTokenOut, _pathToMate);\\n    }\\n\\n    function _canExecuteOrder(\\n        bytes32 _orderId,\\n        address[] memory _pathToTokenOut,\\n        address[] memory _pathToMate\\n    ) internal view returns (bool success, string memory reason) {\\n        Order storage order = orders[_orderId];\\n\\n        uint256 balance = IERC20(order.tokenIn).balanceOf(order.creator);\\n        if (balance < order.amountIn) return (false, \\\"Insufficient balance\\\");\\n\\n        uint256 allowance = IERC20(order.tokenIn).allowance(\\n            order.creator,\\n            address(this)\\n        );\\n        if (allowance < order.amountIn)\\n            return (false, \\\"Insufficient allowance\\\");\\n\\n        if (block.timestamp > order.expiration) return (false, \\\"Expired order\\\");\\n\\n        if (order.status != Status.Open) return (false, \\\"Invalid status\\\");\\n\\n        if (\\n            _pathToTokenOut.length < 1 ||\\n            _pathToTokenOut[0] != order.tokenIn ||\\n            _pathToTokenOut[_pathToTokenOut.length - 1] != order.tokenOut\\n        ) return (false, \\\"Invalid path to output token\\\");\\n\\n        if (order.tokenIn != mate && _pathToMate.length > 1) {\\n            if (\\n                _pathToMate[0] != order.tokenIn ||\\n                _pathToMate[_pathToMate.length - 1] != mate\\n            ) return (false, \\\"Invalid path to Mate token\\\");\\n        }\\n\\n        (uint256 fee, uint256 executorFee) = calculateFees(order.amountIn);\\n\\n        uint256 amountInWithFees = order.amountIn - fee - executorFee;\\n\\n        uint256 amountOutMin = getAmountOutMin(\\n            amountInWithFees,\\n            _pathToTokenOut\\n        );\\n\\n        if (amountOutMin < order.amountOutMin)\\n            return (false, \\\"Insufficient output amount\\\");\\n\\n        return (true, \\\"\\\");\\n    }\\n\\n    function executeOrder(bytes32 _orderId, address[] memory _pathToTokenOut)\\n        external\\n    {\\n        _executeOrder(_orderId, _pathToTokenOut, new address[](0));\\n    }\\n\\n    function executeOrder(\\n        bytes32 _orderId,\\n        address[] memory _pathToTokenOut,\\n        address[] memory _pathToMate\\n    ) external {\\n        _executeOrder(_orderId, _pathToTokenOut, _pathToMate);\\n    }\\n\\n    function _executeOrder(\\n        bytes32 _orderId,\\n        address[] memory _pathToTokenOut,\\n        address[] memory _pathToMate\\n    ) internal nonReentrant {\\n        Order storage order = orders[_orderId];\\n\\n        uint256 balance = IERC20(order.tokenIn).balanceOf(order.creator);\\n        require(balance >= order.amountIn, \\\"Insufficient balance\\\");\\n\\n        uint256 allowance = IERC20(order.tokenIn).allowance(\\n            order.creator,\\n            address(this)\\n        );\\n\\n        require(allowance >= order.amountIn, \\\"Insufficient allowance\\\");\\n\\n        require(block.timestamp <= order.expiration, \\\"Expired order\\\");\\n\\n        require(order.status == Status.Open, \\\"Invalid status\\\");\\n\\n        require(\\n            _pathToTokenOut.length > 1 &&\\n                _pathToTokenOut[0] == order.tokenIn &&\\n                _pathToTokenOut[_pathToTokenOut.length - 1] == order.tokenOut,\\n            \\\"Invalid path to output token\\\"\\n        );\\n\\n        if (order.tokenIn != mate && _pathToMate.length > 1) {\\n            require(\\n                _pathToMate[0] == order.tokenIn &&\\n                    _pathToMate[_pathToMate.length - 1] == mate,\\n                \\\"Invalid path to Mate token\\\"\\n            );\\n        }\\n\\n        (uint256 fee, uint256 executorFee) = calculateFees(order.amountIn);\\n\\n        uint256 amountInWithFees = order.amountIn - fee - executorFee;\\n\\n        uint256 amountOutMin = getAmountOutMin(\\n            amountInWithFees,\\n            _pathToTokenOut\\n        );\\n\\n        require(\\n            amountOutMin >= order.amountOutMin,\\n            \\\"Insufficient output amount\\\"\\n        );\\n\\n        order.status = Status.Filled;\\n\\n        IERC20(order.tokenIn).safeTransferFrom(\\n            order.creator,\\n            address(this),\\n            order.amountIn\\n        );\\n\\n        require(\\n            _swap(\\n                _pathToTokenOut,\\n                amountInWithFees,\\n                order.amountOutMin,\\n                order.recipient\\n            ),\\n            \\\"Swap failed\\\"\\n        );\\n\\n        _transferFees(fee, executorFee, order.tokenIn, _pathToMate);\\n\\n        _removeOpenOrder(_orderId);\\n\\n        emit OrderExecuted(_orderId, msg.sender, block.timestamp);\\n    }\\n\\n    function _transferFees(\\n        uint256 _fee,\\n        uint256 _executorFee,\\n        address _tokenIn,\\n        address[] memory _pathToMate\\n    ) internal {\\n        if (_fee > 0) {\\n            IERC20(_tokenIn).safeTransfer(feeTo, _fee);\\n        }\\n\\n        if (_executorFee > 0) {\\n            if (_tokenIn == mate || _pathToMate.length <= 1) {\\n                IERC20(_tokenIn).safeTransfer(msg.sender, _executorFee);\\n            } else {\\n                require(\\n                    _swap(\\n                        _pathToMate,\\n                        _executorFee,\\n                        getAmountOutMin(_executorFee, _pathToMate),\\n                        msg.sender\\n                    ),\\n                    \\\"Executor fee swap failed\\\"\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x156bfd66591d5891d92dbcb4859aa9cccd11a0ce513177cd3d84bb94c07cacc2\",\"license\":\"MIT\"},\"contracts/core/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport \\\"./UniswapHandler.sol\\\";\\n\\ncontract OrderBook is UniswapHandler {\\n    enum Status {\\n        Expired,\\n        Open,\\n        Filled,\\n        Canceled\\n    }\\n\\n    struct Order {\\n        bytes32 id;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address recipient;\\n        address creator;\\n        uint256 createdAt;\\n        uint256 expiration;\\n        Status status;\\n    }\\n\\n    mapping(bytes32 => Order) public orders;\\n    mapping(address => uint256) private _nonces;\\n\\n    bytes32[] public openOrders;\\n\\n    event OrderPlaced(\\n        bytes32 indexed orderId,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address indexed recipient,\\n        address indexed creator,\\n        uint256 expiration,\\n        uint256 timestamp\\n    );\\n\\n    event OrderCanceled(bytes32 indexed orderId, uint256 timestamp);\\n\\n    function placeOrder(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _recipient,\\n        uint256 _expiration\\n    ) external {\\n        require(_tokenIn != address(0), \\\"Invalid input token address\\\");\\n        require(_tokenOut != address(0), \\\"Invalid output token address\\\");\\n        require(_amountIn > 0, \\\"Invalid input amount\\\");\\n        require(_amountOutMin > 0, \\\"Invalid output amount\\\");\\n        require(_recipient != address(0), \\\"Invalid recipient address\\\");\\n        require(_expiration > block.timestamp, \\\"Invalid expiration timestamp\\\");\\n\\n        bytes32 id = keccak256(\\n            abi.encodePacked(msg.sender, _nonces[msg.sender]++)\\n        );\\n\\n        Order storage order = orders[id];\\n        order.id = id;\\n        order.tokenIn = _tokenIn;\\n        order.tokenOut = _tokenOut;\\n        order.amountIn = _amountIn;\\n        order.amountOutMin = _amountOutMin;\\n        order.recipient = _recipient;\\n        order.creator = msg.sender;\\n        order.createdAt = block.timestamp;\\n        order.expiration = _expiration;\\n\\n        _addOpenOrder(order);\\n\\n        emit OrderPlaced(\\n            id,\\n            _tokenIn,\\n            _tokenOut,\\n            _amountIn,\\n            _amountOutMin,\\n            _recipient,\\n            msg.sender,\\n            _expiration,\\n            block.timestamp\\n        );\\n    }\\n\\n    function cancelOrder(bytes32 _orderId) external {\\n        Order storage order = orders[_orderId];\\n        require(msg.sender == order.creator, \\\"Only order creator\\\");\\n        require(order.status == Status.Open, \\\"Cannot cancel unopen order\\\");\\n        require(order.createdAt > 0, \\\"Invalid order\\\");\\n        order.status = Status.Canceled;\\n        _removeOpenOrder(_orderId);\\n        emit OrderCanceled(_orderId, block.timestamp);\\n    }\\n\\n    function _removeOpenOrder(bytes32 _orderId) internal {\\n        uint256 length = openOrders.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (openOrders[i] == _orderId) {\\n                openOrders[i] = openOrders[length - 1];\\n                openOrders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _addOpenOrder(Order storage _order) private {\\n        _order.status = Status.Open;\\n        openOrders.push(_order.id);\\n    }\\n\\n    function getNonce(address _addr) external view returns (uint256) {\\n        return _nonces[_addr];\\n    }\\n\\n    function getStatus(bytes32 _orderId) external view returns (Status) {\\n        Order storage order = orders[_orderId];\\n\\n        if (order.status == Status.Open) {\\n            if (block.timestamp >= order.expiration) return Status.Expired;\\n        }\\n\\n        return order.status;\\n    }\\n\\n    function isExpiredOrder(bytes32 _orderId) external view returns (bool) {\\n        Order storage order = orders[_orderId];\\n        return block.timestamp >= order.expiration;\\n    }\\n\\n    function getOrder(bytes32 _orderId)\\n        public\\n        view\\n        returns (\\n            bytes32 id,\\n            address tokenIn,\\n            address tokenOut,\\n            uint256 amountIn,\\n            uint256 amountOutMin,\\n            address recipient,\\n            address creator,\\n            uint256 createdAt,\\n            uint256 expiration,\\n            uint8 status\\n        )\\n    {\\n        Order storage order = orders[_orderId];\\n        id = order.id;\\n        tokenIn = order.tokenIn;\\n        tokenOut = order.tokenOut;\\n        amountIn = order.amountIn;\\n        amountOutMin = order.amountOutMin;\\n        recipient = order.recipient;\\n        createdAt = order.createdAt;\\n        creator = order.creator;\\n        expiration = order.expiration;\\n        status = uint8(order.status);\\n    }\\n\\n    function getOpenOrders() external view returns (bytes32[] memory) {\\n        return openOrders;\\n    }\\n}\\n\",\"keccak256\":\"0x57ff1ecba5aecdf302052e56c7d68d7f2ceac7d7c47f37678591d8f718fd6891\",\"license\":\"MIT\"},\"contracts/core/UniswapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract UniswapHandler {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router02 public router;\\n    IUniswapV2Factory public factory;\\n\\n    /**\\n     * @dev Function to swap tokens\\n     * @param _path An array of addresses from tokenIn to tokenOut\\n     * @param _amountIn Amount of input tokens\\n     * @param _amountOutMin Mininum amount of output tokens\\n     * @param _recipient Address to send output tokens to\\n     */\\n    function _swap(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _recipient\\n    ) internal returns (bool) {\\n        IERC20(_path[0]).safeIncreaseAllowance(address(router), _amountIn);\\n\\n        router.swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            _path,\\n            _recipient,\\n            block.timestamp + 120\\n        );\\n\\n        return true;\\n    }\\n\\n    function getReserves(address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (uint256 reserveIn, uint256 reserveOut)\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(\\n            factory.getPair(_tokenIn, _tokenOut)\\n        );\\n\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        return\\n            _tokenIn < _tokenOut ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /**\\n     * @dev Function to get the minumum amount from a swap\\n     * @param _amountIn Amount of input token\\n     * @param _path An array of addresses from tokenIn to tokenOut\\n     * @return Minumim amount out\\n     */\\n    function getAmountOutMin(uint256 _amountIn, address[] memory _path)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory amountOutMins = router.getAmountsOut(_amountIn, _path);\\n        return amountOutMins[_path.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xff3868969ea0afca2964e77659cf71cc7ee8a7e546e0df0e7f459aed265568e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063918f867411610104578063cbe20693116100a2578063e86dea4a11610071578063e86dea4a14610515578063f2fde38b1461051e578063f46901ed14610531578063f887ea401461054457600080fd5b8063cbe20693146104c7578063d22607f5146104da578063d52bb6f4146104ed578063dbe5bab51461050057600080fd5b806399eaa23d116100de57806399eaa23d1461040e5780639c3f1e9014610417578063a45db911146104a1578063c45a0155146104b457600080fd5b8063918f8674146103bc578063938815d1146103c557806395c8036d146103fb57600080fd5b80635778472a11610171578063715018a61161014b578063715018a61461037d5780637489ec23146103855780638d3fc49d146103985780638da5cb5b146103ab57600080fd5b80635778472a146102c55780635de28ae01461033c5780635e0c5f551461035c57600080fd5b8063447c1e8c116101ad578063447c1e8c14610262578063483344291461027557806352238fdd146102885780635762d126146102b057600080fd5b8063017e7e58146101d45780630a5cc93d146102045780632d0335ab1461022b575b600080fd5b6008546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e77f000000000000000000000000000000000000000000000000000000000000000081565b61025461023936600461242f565b6001600160a01b031660009081526003602052604090205490565b6040519081526020016101fb565b6102546102703660046125b8565b610557565b6102546102833660046125d0565b610578565b61029b6102963660046125b8565b610640565b604080519283526020830191909152016101fb565b6102c36102be366004612615565b610682565b005b6102d86102d33660046125b8565b610692565b604080519a8b526001600160a01b03998a1660208c0152978916978a01979097526060890195909552608088019390935290851660a087015290931660c085015260e084019290925261010083019190915260ff16610120820152610140016101fb565b61034f61034a3660046125b8565b610729565b6040516101fb919061285a565b61036f61036a3660046125d0565b610787565b6040516101fb9291906127d6565b6102c36107b2565b6102c36103933660046125b8565b6107f1565b6102c36103a63660046125d0565b610960565b6005546001600160a01b03166101e7565b61025461271081565b6103eb6103d33660046125b8565b60009081526002602052604090206008015442101590565b60405190151581526020016101fb565b6102c361040936600461249f565b610980565b61025460065481565b61048b6104253660046125b8565b6002602081905260009182526040909120805460018201549282015460038301546004840154600585015460068601546007870154600888015460099098015496986001600160a01b039081169896811697959694959381169492169290919060ff168a565b6040516101fb9a999897969594939291906127f1565b6102c36104af3660046125b8565b610cfa565b6001546101e7906001600160a01b031681565b6102c36104d53660046125b8565b610d65565b61036f6104e8366004612615565b610dc9565b61029b6104fb366004612467565b610de5565b610508610f2f565b6040516101fb9190612792565b61025460075481565b6102c361052c36600461242f565b610f87565b6102c361053f36600461242f565b611022565b6000546101e7906001600160a01b031681565b6004818154811061056757600080fd5b600091825260209091200154905081565b6000805460405163d06ca61f60e01b815282916001600160a01b03169063d06ca61f906105ab90879087906004016128b0565b60006040518083038186803b1580156105c357600080fd5b505afa1580156105d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ff9190810190612505565b9050806001845161061091906129b1565b8151811061062e57634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b92915050565b600080612710600754846106549190612992565b61065e9190612972565b9150612710600654846106719190612992565b61067b9190612972565b9050915091565b61068d8383836110ee565b505050565b6000818152600260208190526040822080546001820154928201546003808401546004850154600586015460078701546006880154600889015460098a0154989b6001600160a01b039b8c169b9889169a9699959894851697929094169592949093929160ff9091169081111561071957634e487b7160e01b600052602160045260246000fd5b9150509193959799509193959799565b60008181526002602052604081206001600982015460ff16600381111561076057634e487b7160e01b600052602160045260246000fd5b141561077a578060080154421061077a5750600092915050565b6009015460ff1692915050565b604080516000808252602082019092526060906107a79085908590611784565b915091509250929050565b6005546001600160a01b031633146107e55760405162461bcd60e51b81526004016107dc9061287b565b60405180910390fd5b6107ef6000611cce565b565b600081815260026020526040902060068101546001600160a01b031633146108505760405162461bcd60e51b815260206004820152601260248201527127b7363c9037b93232b91031b932b0ba37b960711b60448201526064016107dc565b6001600982015460ff16600381111561087957634e487b7160e01b600052602160045260246000fd5b146108c65760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742063616e63656c20756e6f70656e206f7264657200000000000060448201526064016107dc565b600081600701541161090a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037b93232b960991b60448201526064016107dc565b60098101805460ff1916600317905561092282611d20565b817f87b5f0afdc3a118b68246141c5bd338672ab3e901be636e27116238d284de6ac4260405161095491815260200190565b60405180910390a25050565b60408051600081526020810190915261097c90839083906110ee565b5050565b6001600160a01b0386166109d65760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420696e70757420746f6b656e2061646472657373000000000060448201526064016107dc565b6001600160a01b038516610a2c5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206f757470757420746f6b656e20616464726573730000000060448201526064016107dc565b60008411610a735760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d60621b60448201526064016107dc565b60008311610abb5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081bdd5d1c1d5d08185b5bdd5b9d605a1b60448201526064016107dc565b6001600160a01b038216610b115760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420726563697069656e7420616464726573730000000000000060448201526064016107dc565b428111610b605760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642065787069726174696f6e2074696d657374616d700000000060448201526064016107dc565b33600081815260036020526040812080549192919083610b7f836129f4565b9091555060405160609290921b6bffffffffffffffffffffffff19166020830152603482015260540160408051601f1981840301815291815281516020928301206000818152600293849052919091208181556001810180546001600160a01b03808d166001600160a01b03199283161790925593820180548b831690861617905560038201899055600482018890556005820180549188169185169190911790556006810180549093163317909255426007830155600882018490559150610c898160098101805460ff1916600190811790915590546004805492830181556000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910155565b604080516001600160a01b038a81168252898116602083015291810188905260608101879052608081018590524260a0820152339186169084907f3b2269637c42f12505a377a0d29efaefb00c9411648974980da2fbb26c7b63049060c00160405180910390a45050505050505050565b6005546001600160a01b03163314610d245760405162461bcd60e51b81526004016107dc9061287b565b6007819055604080518281524260208201527f74dbbbe280ef27b79a8a0c449d5ae2ba7a31849103241d0f98df70bbc9d03e3791015b60405180910390a150565b6005546001600160a01b03163314610d8f5760405162461bcd60e51b81526004016107dc9061287b565b6006819055604080518281524260208201527fc945f955f4b409eaa1a372c180a5183dd14966e6b3fc658f45cf7925f42f55889101610d5a565b60006060610dd8858585611784565b915091505b935093915050565b60015460405163e6a4390560e01b81526001600160a01b0384811660048301528381166024830152600092839283929091169063e6a439059060440160206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e71919061244b565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610eaf57600080fd5b505afa158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee7919061267f565b506001600160701b031691506001600160701b03169150856001600160a01b0316876001600160a01b031610610f1e578082610f21565b81815b945094505050509250929050565b60606004805480602002602001604051908101604052809291908181526020018280548015610f7d57602002820191906000526020600020905b815481526020019060010190808311610f69575b5050505050905090565b6005546001600160a01b03163314610fb15760405162461bcd60e51b81526004016107dc9061287b565b6001600160a01b0381166110165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107dc565b61101f81611cce565b50565b6005546001600160a01b0316331461104c5760405162461bcd60e51b81526004016107dc9061287b565b6001600160a01b03811661109b5760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642066656520746f206164647265737360501b60448201526064016107dc565b600880546001600160a01b0319166001600160a01b038316908117909155604080519182524260208301527f539120415038145f3e401357c9a1eabb383b24bb9ad81cf993ddd07106a6c3639101610d5a565b600260095414156111415760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107dc565b60026009819055600084815260209190915260408082206001810154600682015492516370a0823160e01b81526001600160a01b03938416600482015291939216906370a082319060240160206040518083038186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dc91906126cd565b905081600301548110156112295760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016107dc565b60018201546006830154604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e9060440160206040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b791906126cd565b905082600301548110156113065760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b60448201526064016107dc565b826008015442111561134a5760405162461bcd60e51b815260206004820152600d60248201526c22bc3834b932b21037b93232b960991b60448201526064016107dc565b6001600984015460ff16600381111561137357634e487b7160e01b600052602160045260246000fd5b146113b15760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b60448201526064016107dc565b600185511180156114025750600183015485516001600160a01b039091169086906000906113ef57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b801561145b5750600283015485516001600160a01b0390911690869061142a906001906129b1565b8151811061144857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b6114a75760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964207061746820746f206f757470757420746f6b656e0000000060448201526064016107dc565b60018301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169116148015906114e9575060018451115b156115ef57600183015484516001600160a01b0390911690859060009061152057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161480156115a357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001865161157291906129b1565b8151811061159057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b6115ef5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207061746820746f204d61746520746f6b656e00000000000060448201526064016107dc565b6000806115ff8560030154610640565b9150915060008183876003015461161691906129b1565b61162091906129b1565b9050600061162e828a610578565b905086600401548110156116845760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016107dc565b60098701805460ff191660021790556006870154600388015460018901546116bc926001600160a01b03918216929116903090611e10565b600487015460058801546116dd918b918591906001600160a01b0316611e81565b6117175760405162461bcd60e51b815260206004820152600b60248201526a14ddd85c0819985a5b195960aa1b60448201526064016107dc565b600187015461173390859085906001600160a01b03168b611f77565b61173c8a611d20565b60405142815233908b907fe96da7d7f9b1253f3f855c25f35f32d0a83a96c1a75acdecf0f3bc7cc3bb1ccf9060200160405180910390a3505060016009555050505050505050565b6000838152600260205260408082206001810154600682015492516370a0823160e01b81526001600160a01b039384166004820152606093859216906370a082319060240160206040518083038186803b1580156117e157600080fd5b505afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181991906126cd565b9050816003015481101561186157600060405180604001604052806014815260200173496e73756666696369656e742062616c616e636560601b815250935093505050610ddd565b60018201546006830154604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600092919091169063dd62ed3e9060440160206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ef91906126cd565b9050826003015481101561193a57600060405180604001604052806016815260200175496e73756666696369656e7420616c6c6f77616e636560501b81525094509450505050610ddd565b826008015442111561197a5760006040518060400160405280600d81526020016c22bc3834b932b21037b93232b960991b81525094509450505050610ddd565b6001600984015460ff1660038111156119a357634e487b7160e01b600052602160045260246000fd5b146119dd5760006040518060400160405280600e81526020016d496e76616c69642073746174757360901b81525094509450505050610ddd565b600187511080611a2e5750600183015487516001600160a01b03909116908890600090611a1a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b80611a875750600283015487516001600160a01b03909116908890611a55906001906129b1565b81518110611a7357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15611ad05760006040518060400160405280601c81526020017f496e76616c6964207061746820746f206f757470757420746f6b656e0000000081525094509450505050610ddd565b60018301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614801590611b12575060018651115b15611c1657600183015486516001600160a01b03909116908790600090611b4957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316141580611bcd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168660018851611b9b91906129b1565b81518110611bb957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15611c165760006040518060400160405280601a81526020017f496e76616c6964207061746820746f204d61746520746f6b656e00000000000081525094509450505050610ddd565b600080611c268560030154610640565b91509150600081838760030154611c3d91906129b1565b611c4791906129b1565b90506000611c55828c610578565b90508660040154811015611cab5760006040518060400160405280601a81526020017f496e73756666696369656e74206f757470757420616d6f756e740000000000008152509850985050505050505050610ddd565b505060408051602081019091526000815260019b909a5098505050505050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60045460005b8181101561068d578260048281548110611d5057634e487b7160e01b600052603260045260246000fd5b90600052602060002001541415611dfe576004611d6e6001846129b1565b81548110611d8c57634e487b7160e01b600052603260045260246000fd5b906000526020600020015460048281548110611db857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001556004805480611de357634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055505050565b80611e08816129f4565b915050611d26565b6040516001600160a01b0380851660248301528316604482015260648101829052611e7b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261205e565b50505050565b600080548551611ed5916001600160a01b031690869088908590611eb557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166121309092919063ffffffff16565b6000546001600160a01b03166338ed173985858886611ef542607861295a565b6040518663ffffffff1660e01b8152600401611f159594939291906128c9565b600060405180830381600087803b158015611f2f57600080fd5b505af1158015611f43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f6b9190810190612505565b50600195945050505050565b8315611f9757600854611f97906001600160a01b038481169116866121f1565b8215611e7b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480611fdf57506001815111155b15611ffd57611ff86001600160a01b03831633856121f1565b611e7b565b612012818461200c8685610578565b33611e81565b611e7b5760405162461bcd60e51b815260206004820152601860248201527f4578656375746f72206665652073776170206661696c6564000000000000000060448201526064016107dc565b60006120b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122219092919063ffffffff16565b80519091501561068d57808060200190518101906120d19190612598565b61068d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107dc565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561217c57600080fd5b505afa158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b491906126cd565b6121be919061295a565b6040516001600160a01b038516602482015260448101829052909150611e7b90859063095ea7b360e01b90606401611e44565b6040516001600160a01b03831660248201526044810182905261068d90849063a9059cbb60e01b90606401611e44565b6060612230848460008561223a565b90505b9392505050565b60608247101561229b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107dc565b843b6122e95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107dc565b600080866001600160a01b031685876040516123059190612776565b60006040518083038185875af1925050503d8060008114612342576040519150601f19603f3d011682016040523d82523d6000602084013e612347565b606091505b5091509150612357828286612362565b979650505050505050565b60608315612371575081612233565b8251156123815782518084602001fd5b8160405162461bcd60e51b81526004016107dc9190612868565b600082601f8301126123ab578081fd5b813560206123c06123bb83612936565b612905565b80838252828201915082860187848660051b89010111156123df578586fd5b855b858110156124065781356123f481612a3b565b845292840192908401906001016123e1565b5090979650505050505050565b80516001600160701b038116811461242a57600080fd5b919050565b600060208284031215612440578081fd5b813561223381612a3b565b60006020828403121561245c578081fd5b815161223381612a3b565b60008060408385031215612479578081fd5b823561248481612a3b565b9150602083013561249481612a3b565b809150509250929050565b60008060008060008060c087890312156124b7578182fd5b86356124c281612a3b565b955060208701356124d281612a3b565b9450604087013593506060870135925060808701356124f081612a3b565b8092505060a087013590509295509295509295565b60006020808385031215612517578182fd5b825167ffffffffffffffff81111561252d578283fd5b8301601f8101851361253d578283fd5b805161254b6123bb82612936565b80828252848201915084840188868560051b870101111561256a578687fd5b8694505b8385101561258c57805183526001949094019391850191850161256e565b50979650505050505050565b6000602082840312156125a9578081fd5b81518015158114612233578182fd5b6000602082840312156125c9578081fd5b5035919050565b600080604083850312156125e2578182fd5b82359150602083013567ffffffffffffffff8111156125ff578182fd5b61260b8582860161239b565b9150509250929050565b600080600060608486031215612629578283fd5b83359250602084013567ffffffffffffffff80821115612647578384fd5b6126538783880161239b565b93506040860135915080821115612668578283fd5b506126758682870161239b565b9150509250925092565b600080600060608486031215612693578283fd5b61269c84612413565b92506126aa60208501612413565b9150604084015163ffffffff811681146126c2578182fd5b809150509250925092565b6000602082840312156126de578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561271d5781516001600160a01b0316875295820195908201906001016126f8565b509495945050505050565b6004811061274657634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526127628160208601602086016129c8565b601f01601f19169290920160200192915050565b600082516127888184602087016129c8565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156127ca578351835292840192918401916001016127ae565b50909695505050505050565b8215158152604060208201526000612230604083018461274a565b8a81526001600160a01b038a811660208301528981166040830152606082018990526080820188905286811660a0830152851660c082015260e081018490526101008101839052610140810161284b610120830184612728565b9b9a5050505050505050505050565b6020810161063a8284612728565b602081526000612233602083018461274a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b82815260406020820152600061223060408301846126e5565b85815284602082015260a0604082015260006128e860a08301866126e5565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561292e5761292e612a25565b604052919050565b600067ffffffffffffffff82111561295057612950612a25565b5060051b60200190565b6000821982111561296d5761296d612a0f565b500190565b60008261298d57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156129ac576129ac612a0f565b500290565b6000828210156129c3576129c3612a0f565b500390565b60005b838110156129e35781810151838201526020016129cb565b83811115611e7b5750506000910152565b6000600019821415612a0857612a08612a0f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461101f57600080fdfea2646970667358221220a081f8ef96382574024a7e9f6288d451c99023e2ff65a1c43d56c9232ee9e12064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountOutMin(uint256,address[])": {
        "details": "Function to get the minumum amount from a swap",
        "params": {
          "_amountIn": "Amount of input token",
          "_path": "An array of addresses from tokenIn to tokenOut"
        },
        "returns": {
          "_0": "Minumim amount out"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6073,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "router",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IUniswapV2Router02)4296"
      },
      {
        "astId": 6076,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Factory)3658"
      },
      {
        "astId": 5443,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "orders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Order)5438_storage)"
      },
      {
        "astId": 5447,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5450,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "openOrders",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 591,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4307,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "executorFeeNumerator",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4310,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "feeNumerator",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4312,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "feeTo",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 790,
        "contract": "contracts/core/MateCore.sol:MateCore",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Factory)3658": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)4296": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(Status)5416": {
        "encoding": "inplace",
        "label": "enum OrderBook.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Order)5438_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OrderBook.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)5438_storage"
      },
      "t_struct(Order)5438_storage": {
        "encoding": "inplace",
        "label": "struct OrderBook.Order",
        "members": [
          {
            "astId": 5418,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5420,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "tokenIn",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5422,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "tokenOut",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5424,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "amountIn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5426,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "amountOutMin",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5428,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5430,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5432,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5434,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "expiration",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5437,
            "contract": "contracts/core/MateCore.sol:MateCore",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(Status)5416"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
